#version 430 core

/// Pipeline stage 3.
/// Calculates the new velocity using pressure and viscosity
/// forces from other particles and the wall boundary.
///   Input: Density (2), Uniform Grid, Position (1), Velocity (1), Distance Func
///   Output: Velocity (2)

const float EPS = 0.001;

layout (local_size_x = 128) in;

layout (location = 0) uniform vec3 gridLength;
layout (location = 1) uniform vec3 gridOrigin;
layout (location = 2) uniform uvec3 cellsPerAxis;

layout (std430, binding = 0) buffer positionBuf1 { float position1[]; };
layout (std430, binding = 1) buffer mappingBuf { uint mappings[]; };
layout (std430, binding = 2) buffer indicesBuf { uint indices[]; };
layout (std430, binding = 3) buffer densityBuf2 { float density2[]; };
layout (std430, binding = 4) buffer velocityBuf1 { float velocity1[]; };
layout (r32f, binding = 0) uniform readonly image3D distanceBuf;

layout (std430, binding = 5) buffer velocityBuf2 { float velocity2[]; };

uint cellId(float length, float pos) {
  return uint((cellsPerAxis * (1.0 - EPS) * (length - pos)) / length);
}

uint voxelId(uint particleCount, float x, float y, float z) {
  uint xCell = cellId(gridLength.x, x - gridOrigin.x);
  uint yCell = cellId(gridLength.y, y - gridOrigin.y);
  uint zCell = cellId(gridLength.z, z - gridOrigin.z);
  uint vox = xCell + cellsPerAxis.x * (yCell + cellsPerAxis.y * zCell);
  return vox;
}

void main() {
  uint particleCount = mappings.length() / 2;
  int particlesPerGroup = (position1.length() / 6) / int(gl_NumWorkGroups.x);
  int startParticle = int(gl_WorkGroupID.x) * particlesPerGroup;
  int endParticle = startParticle + particlesPerGroup;
  for (int p = startParticle; p < endParticle; ++p) {
    float x = position1[p * 6 + 0];
    float y = position1[p * 6 + 1];
    float z = position1[p * 6 + 2];
    uint vId = voxelId(particleCount, x, y, z);

    //
    // TODO
    //

    velocity2[p * 3 + 0] = -x * 0.1f * sin(vId + 1);
  }
}
