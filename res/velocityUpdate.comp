#version 430 core
#define M_PI 3.14159265358979323846
#define k 1.0

/// Pipeline stage 3.
/// Calculates the new velocity using pressure and viscosity
/// forces from other particles and the wall boundary.
///   Input: Density (2), Uniform Grid, Position (1), Velocity (1), Distance Func
///   Output: Velocity (2)

layout (local_size_x = 128) in;

layout (location = 0) uniform float dt;
layout (location = 1) uniform vec3 gridLength;
layout (location = 2) uniform vec3 gridOrigin;
layout (location = 3) uniform uvec3 cellsPerAxis;
layout (location = 4) uniform vec3 gravity;

layout (std430, binding = 0) buffer positionBuf1 { float position1[]; };
layout (std430, binding = 1) buffer mappingBuf { uint mappings[]; };
layout (std430, binding = 2) buffer indicesBuf { uint indices[]; };
layout (std430, binding = 3) buffer densityBuf2 { float density2[]; };
layout (std430, binding = 4) buffer velocityBuf1 { float velocity1[]; };
layout (r32f, binding = 0) uniform readonly image3D distanceBuf;

layout (std430, binding = 5) buffer velocityBuf2 { float velocity2[]; };

const float EPS = 0.001;
const float mass = 0.5;

///
uint cellId(uint cellCount, float length, float pos) {
  return uint((cellCount * (1.0 - EPS) * (length - pos)) / length);
}

uint voxelId(uint particleCount, vec3 pos) {
  vec3 c = pos - gridOrigin;
  if (c.x < 0 || c.x > gridLength.x || c.y < 0 || c.y > gridLength.y || c.z < 0 || c.z > gridLength.z)
    return cellsPerAxis.x * cellsPerAxis.y * cellsPerAxis.z;
  uint xCell = cellId(cellsPerAxis.x, gridLength.x, c.x);
  uint yCell = cellId(cellsPerAxis.y, gridLength.y, c.y);
  uint zCell = cellId(cellsPerAxis.z, gridLength.z, c.z);
  uint vox = xCell + cellsPerAxis.x * (yCell + cellsPerAxis.y * zCell);
  return vox;
}

///
vec3 bbNormal(vec3 pos) {
  vec3 absPos = abs(pos);
  float x = (absPos.x > absPos.y && absPos.x > absPos.z) ? 1.0 : 0.0;
  float y = (absPos.y > absPos.x && absPos.y > absPos.z) ? 1.0 : 0.0;
  float z = (absPos.z > absPos.x && absPos.z > absPos.y) ? 1.0 : 0.0;
  return normalize(vec3(pos.x * x, pos.y * y, pos.z * z));
}

///
vec3 weightPress(float re, vec3 r) {
  return (45 * pow(re - length(r), 3) * (r / abs(r))) / (M_PI * pow(re, 6));
}

float weightVis(float re, vec3 r) {
  return (re - length(r)) / (M_PI * pow(re, 6));
}

///
float pressureConstitutive(uint pId) {
  float p_0 = 1.0; // rest pressure
  float d_0 = 1000.0; // rest density
  float d_i = density2[pId];
  return p_0 + k * (d_i - d_0);
}

vec3 wallForce(float mass, float d, vec3 pos, float dt) {
  vec3 global = pos - gridOrigin - gridLength * 0.5;
  global = global / gridLength;

  float wallDist = 0.5 - max(abs(global.x), max(abs(global.y), abs(global.z)));
  if (wallDist > d)
    return vec3(0);

  vec3 wallNormal = -1.0 * bbNormal(global);
  return (mass * (d - wallDist) * wallNormal) / (dt * dt);
}

vec3 pressureForce(uint pId) {
  // TODO: for each p in range (3, 3)
  uint pId2 = pId + 0;
  float x1 = position1[pId * 6 + 0];
  float y1 = position1[pId * 6 + 1];
  float z1 = position1[pId * 6 + 2];
  float x2 = position1[pId2 * 6 + 0];
  float y2 = position1[pId2 * 6 + 1];
  float z2 = position1[pId2 * 6 + 2];

  float pi = 100.0;//pressureConstitutive(pId+1);
  float pj = 100.0;//pressureConstitutive(pId);
  float re = 0.1;
  vec3 r = vec3(0.0);//vec3(x2, y2, z2) - vec3(x1, y1, z1);
  vec3 w_press = weightPress(re, r);
  return -1.0 * (mass * (pi + pj) * w_press) / (2 * pj);
}

vec3 viscosityForce() {
  // TODO
  return vec3(0.0);
}

///
vec3 momentumConservation(float density, vec3 pressure,
  vec3 oldVelocity, float visCoeff, vec3 gravity) {
  // Calculates the velocity.
  vec3 dUdt = (1.0/density) * /*GRADIENT?*/ pressure + visCoeff * /*LAPLACE?*/ oldVelocity + gravity;
  return dUdt;
}

///
void main() {
  uint particleCount = mappings.length() / 2;
  uint particlesPerGroup = particleCount / int(gl_NumWorkGroups.x);
  uint startParticle = int(gl_WorkGroupID.x) * particlesPerGroup;
  uint endParticle = startParticle + particlesPerGroup;
  for (uint p = startParticle; p < endParticle; ++p) {
    float x = position1[p * 6 + 0];
    float y = position1[p * 6 + 1];
    float z = position1[p * 6 + 2];
    uint vId = voxelId(particleCount, x, y, z);
    vec3 oldVelocity = vec3(velocity1[p * 3 + 0], velocity1[p * 3 + 1], velocity1[p * 3 + 2]);

    //
    // TODO
    //
    float mass = 0.5;
    float d = 0.01;
    vec3 pos = vec3(x, y, z);

    float visCoeff = 1.0;
    float density = density2[p];

    vec3 pressure = vec3(0.0);
    pressure += wallForce(mass, d, pos, dt);
    pressure += pressureForce(p);
    pressure += viscosityForce();

    vec3 momentumTest = momentumConservation(density, pressure, oldVelocity, visCoeff, gravity) * dt;

    velocity2[p * 3 + 0] = momentumTest.x;
    velocity2[p * 3 + 1] = momentumTest.y;
    velocity2[p * 3 + 2] = momentumTest.z;

    //position1[p * 6 + 3] = momentumTest.x;
    //position1[p * 6 + 4] = momentumTest.y;
    //position1[p * 6 + 5] = momentumTest.z;
  }
}
