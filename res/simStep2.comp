#version 460 core

#extension GL_ARB_bindless_texture: require

const float SAFE_BOUNDS = 0.001;

layout (local_size_x = 32) in;

layout(location = 0, r32ui, bindless_image) uniform restrict readonly uimage3D grid;
layout(location = 1) uniform vec3 invCellSize;
layout(location = 2) uniform float dt;
layout(location = 3) uniform vec3 gridSize;
layout(location = 4) uniform vec3 gridOrigin;
layout(location = 5) uniform uint particleCount;
layout(location = 6) uniform ivec3 gridRes;
layout(location = 7) uniform vec3 gravity;
layout(location = 8) uniform float mass;
layout(location = 9) uniform float re;
layout(location = 10) uniform float visCoeff;
layout(location = 11) uniform float weightConstVis;
layout(location = 12) uniform float weightConstPress;

struct Particle
{
  vec3 position;
  float density;
  vec3 color;
  float pressure;
  vec3 velocity;
  float padding;
};

layout(binding = 0, std430) restrict buffer particleBuf
{
  Particle particles[];
};

void main()
{
  const uint particleId = gl_GlobalInvocationID.x;

  if (particleId >= particleCount)
  {
    return;
  }

  const Particle particle = particles[particleId];

  const ivec3 voxelId = ivec3(invCellSize * (particle.position - gridOrigin));

  vec3 forcePressure = vec3(0.0);
  vec3 forceViscosity = vec3(0.0);

  ivec3 i;

  for (i.x = -1; i.x <= 1; i.x++)
  {
    for (i.y = -1; i.y <= 1; i.y++)
    {
      for (i.z = -1; i.z <= 1; i.z++)
      {
        const ivec3 newVoxelId = voxelId + i;

        if (any(lessThan(newVoxelId, ivec3(0))) ||
            any(greaterThanEqual(newVoxelId, gridRes)))
        {
          continue;
        }

        const uint voxelValue = imageLoad(grid, newVoxelId).r;

        const uint voxelParticleOffset = (voxelValue >> 8);
        const uint voxelParticleCount = (voxelValue & 0xFF);

        for (uint p = 0; p < voxelParticleCount; ++p)
        {
          const uint otherParticleId = voxelParticleOffset + p;

          const Particle otherParticle = particles[otherParticleId];

          const vec3 r = particle.position - otherParticle.position;

          const float rLen = length(r);

          if (rLen >= re)
          {
            continue;
          }

          vec3 weightPressure = vec3(0.0);

          if (rLen > 0.0)
          {
            weightPressure = weightConstPress * pow(re - rLen, 3) * (r / rLen);
          }

          const float pressure = particle.pressure + otherParticle.pressure;

          forcePressure += (mass * pressure * weightPressure) / (2.0 * otherParticle.density);

          const float weightVis = weightConstVis * (re - rLen);

          const vec3 velocityDiff = otherParticle.velocity - particle.velocity;

          forceViscosity += (mass * velocityDiff * weightVis) / otherParticle.density;
        }
      }
    }
  }

  barrier();

  const vec3 forceGravity = gravity * particle.density;

  const vec3 force = (forceViscosity * visCoeff) - forcePressure + forceGravity;

  const vec3 acceleration = force / particle.density;

  vec3 newVelo = particle.velocity + acceleration * dt;
  vec3 newPos = particle.position + newVelo * dt;

  const float wallDamping = 0.5;
  const vec3 boundsL = gridOrigin + SAFE_BOUNDS;
  const vec3 boundsH = gridOrigin + gridSize - SAFE_BOUNDS;

  if (newPos.x < boundsL.x) { newVelo.x *= -wallDamping; newPos.x = boundsL.x; }
  if (newPos.x > boundsH.x) { newVelo.x *= -wallDamping; newPos.x = boundsH.x; }
  if (newPos.y < boundsL.y) { newVelo.y *= -wallDamping; newPos.y = boundsL.y; }
  if (newPos.y > boundsH.y) { newVelo.y *= -wallDamping; newPos.y = boundsH.y; }
  if (newPos.z < boundsL.z) { newVelo.z *= -wallDamping; newPos.z = boundsL.z; }
  if (newPos.z > boundsH.z) { newVelo.z *= -wallDamping; newPos.z = boundsH.z; }

  particles[particleId].velocity = newVelo;
  particles[particleId].position = newPos;
}
