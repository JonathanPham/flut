#version 430 core

layout (location = 0) uniform vec3 colorOverride;

layout (local_size_x = 10, local_size_y = 10) in;

// We could use a struct, but that would need padding..
layout (std430, binding = 0) buffer points {
   float data[];
};

// To avoid padding, we need some getters/setters
vec3 getPos(uint index) {
  return vec3(data[6*index+0], data[6*index+1], data[6*index+2]);
}
vec3 getCol(uint index) {
  return vec3(data[6*index+3], data[6*index+4], data[6*index+5]);
}
void setPos(uint index, vec3 pos) {
  data[6*index+0] = pos.x;
  data[6*index+1] = pos.y;
  data[6*index+2] = pos.z;
}
void setCol(uint index, vec3 col) {
  data[6*index+3] = col.x;
  data[6*index+4] = col.y;
  data[6*index+5] = col.z;
}

// Entry point
void main() {
  uint totalPoints = (data.length() / 6);
  uint pointsPerGroup = totalPoints / gl_NumWorkGroups.x;
  uint startIndex = gl_WorkGroupID.x * pointsPerGroup;
  uint endIndex = startIndex + pointsPerGroup;
  float c = gl_WorkGroupID.x;
  float groupWorkSize = 10.0;
  float groupWorkTotal = totalPoints / groupWorkSize;
  vec3 color = vec3(0.0, c / groupWorkTotal, 0.0);
  for (uint i = startIndex; i < endIndex; ++i) {
    setCol(i, color);
  }
}
