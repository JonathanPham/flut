#version 430 core

/// Pipeline stage 1 (1).
/// This shader maps a particle to a Voxel of the Uniform Grid.
/// The pairs <Particle, Voxel> are stored in a uint buffer and
/// then sorted in a following shader step.
///   Input: Position (1)
///   Output: Particle/Voxel Mappings (2x)

const float EPS = 0.001;

layout (local_size_x = 128) in;

layout (location = 0) uniform vec3 gridLength;
layout (location = 1) uniform vec3 gridOrigin;
layout (location = 2) uniform uvec3 gridResolution;
layout (location = 3) uniform uint particleCount;

layout (std430, binding = 0) restrict readonly buffer positionBuf1 { float position1[]; };
layout (std430, binding = 1) restrict writeonly buffer unsortedBuf { uint unsorted[]; };
layout (std430, binding = 2) restrict writeonly buffer sortedBuf { uint sorted[]; };

uvec3 computeCellIds(vec3 pos) {
  return uvec3((gridResolution * (1.0 - EPS) * (pos - gridOrigin)) / gridLength);
}

uint computeVoxId(uint particle) {
  vec3 pos = vec3(position1[particle * 3 + 0],
    position1[particle * 3 + 1], position1[particle * 3 + 2]);
  uvec3 cellIds = computeCellIds(pos);
  uint voxId = cellIds.x + gridResolution.x * (cellIds.y + gridResolution.y * cellIds.z);
  return voxId;
}

void main() {
  uint p = gl_GlobalInvocationID.x;
  if (p >= particleCount)
    return;

  uint voxId = computeVoxId(p);
  unsorted[p * 2 + 0] = p;
  unsorted[p * 2 + 1] = voxId;
  sorted[p * 2 + 0] = p;
  sorted[p * 2 + 1] = voxId;
}
